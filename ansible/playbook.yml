---
- hosts: all
  gather_facts: yes
  vars:
    network_install_http_root: /srv/network-install
    debian_netboot_tarball: http://archive.ubuntu.com/ubuntu/dists/trusty-updates/main/installer-amd64/current/images/netboot/netboot.tar.gz
    tftp_boot_root: /var/lib/tftpboot
    isos_mount_directory: /mnt/isos
    kickstart_wsgi_app_dir: /srv/kickstart
    kickstart_wsgi_app: "{{ kickstart_wsgi_app_dir }}/app.py"
  tasks:
    - name: Install prerequisite apt packages
      apt: update_cache=yes state=latest name='{{ item }}' cache_valid_time=20000
      with_items:
        - dnsmasq
        - nginx
        - syslinux
        - syslogd
        - uwsgi
        - uwsgi-plugin-python
        - python-jinja2
        - python-yaml

    # Configure Dnsmasq
    - name: Configure Dnsmasq with /etc/dnsmasq.conf
      template: src=templates/etc/dnsmasq.conf dest=/etc/
      notify: Restart dnsmasq

    # Setup tftp boot dir
    - name: Install ubuntu netboot installer for tftp
      unarchive:


    # Setup Install disk
    - name: Create mount directories
      file: state=directory path={{ isos_mount_directory }}/{{ item.name }}
      with_items: "{{ install_isos }}"

    - name: Download install isos
      get_url:
        dest=/home/vagrant/{{ item.name }}.iso
        url={{ item.url }}/{{ item.name }}.iso
        checksum={{ item.checksum }}
      with_items: "{{ install_isos }}"

    - name: Mount install isos
      mount:
        name={{ isos_mount_directory }}/{{ item.name }}
        src=/home/vagrant/{{ item.name }}.iso
        fstype=iso9660
        state=mounted
      with_items: "{{ install_isos }}"

    - name: Create boot directories for isos
      file: state=directory path={{ tftp_boot_root }}/{{ item.name }}
      with_items: "{{ install_isos }}"


    - name: Copy boot files for isos
      copy: remote_src=yes src={{ isos_mount_directory }}/{{ item.0.name }}/{{ item.1 }} dest={{ tftp_boot_root }}/{{ item.0.name}}
      with_subelements:
        - "{{ install_isos }}"
        - boot_files

    # Setup wsgi app to serve kickstart files
    - name: Make app dir
      file: state=directory path=/srv/kickstart/

    - name: Install python wsgi app
      template: src=templates/{{ kickstart_wsgi_app }} dest={{ kickstart_wsgi_app }}
      notify: Restart kickstart app

    - name: Install upstart script
      template: src=templates/etc/init/kickstart.conf dest=/etc/init/kickstart.conf

    - name: Install kickstart app data
      copy: dest={{ kickstart_wsgi_app_dir }}/host_vars.yml content="{{ kickstart_host_vars | to_nice_yaml }}"

    - name: Copy kickstart template files
      copy: src=files/srv/kickstart/templates dest={{ kickstart_wsgi_app_dir }}/

    # Setup Nginx to serve the install disk and kickstart
    - template: src=templates/etc/nginx/sites-available/network-install.conf dest=/etc/nginx/sites-available/
      notify: Restart nginx

    - file: state=link src=../sites-available/network-install.conf path=/etc/nginx/sites-enabled/network-install.conf
      notify: Restart nginx

    - file: state=absent path=/etc/nginx/sites-enabled/default
      notify: Restart nginx

  handlers:
    - name: Restart dnsmasq
      service:  name=dnsmasq state=restarted enabled=yes

    - name: Restart nginx
      service: name=nginx state=restarted enabled=yes

    - name: Restart kickstart app
      service: name=kickstart state=restarted enabled=yes
